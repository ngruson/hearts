@page "/gameTable"

@using Hearts.Contracts
@using Hearts.Contracts.Events
@inject IJSRuntime JSRuntime
@inject LocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject SignalRService SignalRService

<div class="h-screen overflow-hidden bg-green-700">
    <div class="h-9/10 grid grid-cols-3 gap-4 items-center">
        <!-- Player 1 (Third row, second column) -->
        <div class="flex flex-col items-center col-start-2 row-start-3">
            <div @ref="statusMessage" class="mb-12 w-100 h-8 bg-blue-500 border-yellow-500 border-2 flex text-white items-center justify-center">
                Text
            </div>
            <div class="flex justify-center min-w-xs">
                @if (Player(0) is not null)
                {
                    @foreach (var card in Player(0)!.Cards)
                    {
                        <CardComponent Card=@card Toggled=@ToggleCard(0, card) Style="h-32 -ml-15" CardSelectedStyle="up" SelectedCards=@Player(0)!.CardsToPass OnClick="CardClicked" />
                    }
                }                
            </div>
            <div class="flex justify-center items-center mt-4">
                <div class="flex flex-col items-center self-center">
                    <div class="w-32 h-32 rounded-full border-2 border-white flex items-center justify-center text-white font-bold text-xl mb-2 mt-4">
                        @PlayerScore(0)
                    </div>
                    <p class="text-white font-bold text-xl">@PlayerName(0)</p>
                </div>
                <div id="tricks" class="flex ml-12 min-w-24">
                    @if (Player(0) is not null)
                    {
                        @foreach (var tricks in TricksForPlayer(0))
                        {
                            <CardComponent FaceDown=true Style="h-16 -ml-6" />
                        }
                    }
                </div>
            </div>
        </div>
        <!-- Player 2 (Second row, first column) -->
        <div class="flex justify-center items-center col-start-1 row-start-2">
            <div class="flex flex-col items-center ml-12 gap-4">
                <div class="flex flex-col justify-center items-center">
                    <div class="w-32 h-32 rounded-full border-2 border-white flex items-center justify-center text-white font-bold text-xl mb-2">
                        @PlayerScore(1)
                    </div>
                    <p class="text-white font-bold text-xl">@PlayerName(1)</p>
                </div>
                <div id="tricks" class="flex flex-col mt-8">
                    @if (Player(1) is not null)
                    {
                        @foreach (var tricks in TricksForPlayer(1))
                        {
                            <CardComponent FaceDown=true Style="rotate-90 w-10 -mt-10" />
                        }
                    }
                </div>
            </div>
            <div class="flex flex-col items-center ml-12">
                @if (Player(1) is not null)
                {
                    foreach (var card in Player(1)!.Cards)
                    {
                        <CardComponent Card=@card FaceDown=true Toggled=@ToggleCard(1, card) Style="rotate-90 h-32 -mt-24" CardSelectedStyle="right" />
                    }
                }
            </div>
        </div>
        <!-- Player 3 (First row, second column) -->
        <div class="flex flex-col items-center col-start-2 row-start-1">
            <div class="flex justify-center items-center mt-4 gap-4">                
                <div class="flex flex-col items-center self-center">
                    <div class="w-32 h-32 rounded-full border-2 border-white flex items-center justify-center text-white font-bold text-xl mb-2">
                        @PlayerScore(2)
                    </div>
                    <p class="text-white font-bold text-xl">@PlayerName(2)</p>
                </div>
                <div id="tricks" class="flex ml-12 min-w-24">
                    @if (Player(2) is not null)
                    {
                        @foreach (var tricks in TricksForPlayer(2))
                        {
                            <CardComponent FaceDown=true Style="h-16 -ml-6" />
                        }
                    }
                </div>
            </div>
            <div class="flex justify-center mt-4 min-w-xs">
                @if (Player(2) is not null)
                {
                    foreach (var card in Player(2)!.Cards)
                    {
                        <CardComponent Card=@card FaceDown=true Toggled=@ToggleCard(2, card) Style="h-32 -ml-15" CardSelectedStyle="down" />
                    }
                }
            </div>
        </div>
        <!-- Player 4 (Second row, third column) -->
        <div class="flex justify-center items-center col-start-3 row-start-2 -ml-50">
            <div class="flex flex-col">
                @if (Player(3) is not null)
                {
                    @foreach (var card in Player(3)!.Cards)
                    {
                        <CardComponent Card=@card FaceDown=true Toggled=@ToggleCard(3, card) Style="rotate-90 h-32 -mt-24" CardSelectedStyle="left" />
                    }
                }
            </div>
            <div class="flex flex-col ml-12 gap-4">
                <div class="flex flex-col justify-center items-center">
                    <div class="w-32 h-32 rounded-full border-2 border-white flex items-center justify-center text-white font-bold text-xl mb-2">
                        @PlayerScore(3)
                    </div>
                    <p class="text-white font-bold text-xl">@PlayerName(3)</p>
                </div>
                <div id="tricks" class="flex flex-col -ml-10 mt-8">
                    @if (Player(3) is not null)
                    {
                        @foreach (var tricks in TricksForPlayer(3))
                        {
                            <CardComponent FaceDown=true Style="rotate-90 w-10 ml-20 -mt-10" />
                        }
                    }
                </div>
            </div>
            @* <div class="flex flex-col items-center ml-12">
                <div class="w-32 h-32 rounded-full border-2 border-white flex items-center justify-center text-white font-bold text-xl mb-2">
                    @PlayerScore(3)
                </div>
                <p class="text-white font-bold text-xl">@PlayerName(3)</p>
            </div> *@
        </div>
        <!-- Center area -->
        @if (game?.IsCompleted == false)
        {
            <div id="center-area" class="flex flex-col col-start-2 row-start-2">
                <div class="relative flex items-center justify-center transition-all duration-500">
                    @if (TrickCard(2) is not null)
                    {
                        <CardComponent Card=@TrickCard(2) Style=@($"absolute h-32 -mt-20 {ZIndex(2)}") />
                    }
                    @if (TrickCard(1) is not null)
                    {
                        <CardComponent Card=@TrickCard(1) Style=@($"absolute h-32 -ml-20 {ZIndex(1)}") />
                    }
                    @if (TrickCard(3) is not null)
                    {
                        <CardComponent Card=@TrickCard(3) Style=@($"absolute h-32 ml-20 {ZIndex(3)}") />
                    }
                    @if (TrickCard(0) is not null)
                    {
                        <CardComponent Card=@TrickCard(0) Style=@($"absolute h-32 mt-20 {ZIndex(0)}") />
                    }
                </div>
            </div>
        }
    </div>
    <div class="flex justify-end h-1/10 -mt-4">
        <button @onclick="PassCards" disabled="@passButtonDisabled" class="mr-100 mb-50 w-40 h-20 bg-blue-800 text-white text-xl border-4 border-gray-500 py-2 px-4 rounded">
            Pass
        </button>
    </div>
    @if (this.game is not null)
    {
        <GameOverDialog Show="ShowModalDialog" OnClose="HandleClose" Game=@game />
    }
</div>

@code {
    private Game? game;
    private Player? player;
    private RoundPlayer? roundPlayer;
    private bool passButtonDisabled = true;
    private ElementReference statusMessage;
    private bool ShowModalDialog { get; set; } = false;

    private void HandleClose(bool show)
    {
        NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        SignalRService.GameUpdated += OnGameUpdated;
        SignalRService.InvalidCardPlayed += OnInvalidCardPlayed;

        game = await LocalStorageService.GetItemAsync<Game>("game");
        player = await LocalStorageService.GetItemAsync<Player>("player");
    }

    private async void OnGameUpdated(object? sender, Game game)
    {
        this.game = game;
        this.roundPlayer = game.CurrentRound?.Players.FirstOrDefault(_ => _.Player.Id == player?.Id);
        await LocalStorageService.SetItemAsync("game", game);

        if (this.game.IsCompleted)
        {
            this.ShowModalDialog = true;
        }
        else if (this.game.CurrentRound?.SelectingCards == true)
        {
            RoundPlayer playerTo = GetPlayerTo(0);
            await SetStatusMessage(this.game.Message! + playerTo.Player.PlayerName);
        }
        else
        {
            Turn? turn = this.game.CurrentRound?.Tricks.LastOrDefault()?.Turn;

            if (turn?.PlayerId == this.roundPlayer?.Player.Id)
            {
                await SetStatusMessage("Your turn!");
            }
            else
            {
                await SetStatusMessage($"{turn?.PlayerName}'s turn!");
            }
        }

        if (this.game.CurrentRound?.Tricks.LastOrDefault()?.IsCompleted == true)
        {
            //await JS.InvokeVoidAsync("moveCardsToWinner");
        }

        await InvokeAsync(StateHasChanged);
    }

    private async void OnInvalidCardPlayed(object? sender, InvalidCardPlayedEvent invalidCardPlayedEvent)
    {
        Round? round = game?.CurrentRound;

        if (invalidCardPlayedEvent.Message is not null)
        {
            await SetStatusMessage(invalidCardPlayedEvent.Message);
        }
    }

    private string? PlayerName(int index)
    {
        if (game is null)
            return "Waiting for player";

        if (game.Players?.Count() <= index)
            return "Waiting for player";

        return game.Players?[index].PlayerName;
    }

    private RoundPlayer? Player(int index)
    {
        if (game?.CurrentRound is null || game.CurrentRound.Players.Count() <= index)
        {
            return null;
        }

        return game.CurrentRound.Players[index];
    }

    private int PlayerScore(int index)
    {
        if (game?.CurrentRound is null || game.CurrentRound.Players.Count() <= index)
        {
            return 0;
        }

        RoundPlayer? player = Player(index);

        return game.Scores?
            .SingleOrDefault(_ => _.PlayerId == player?.Player.Id)?.Points ?? 0;
    }

    private async Task SetStatusMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("setTextContent", statusMessage, message);
    }

    private Trick[] TricksForPlayer(int index)
    {
        if (game?.CurrentRound is null || game.CurrentRound.Players.Count() <= index)
        {
            return [];
        }

        return game.CurrentRound.Tricks.Where(_ => _.Winner == Player(index)?.Player.Id).ToArray();
    }

    private bool ToggleCard(int index, Card card)
    {
        return Player(index) is not null ? Player(index)!.CardsToPass.Any(_ => _.Suit == card.Suit && _.Rank == card.Rank) : false;
    }

    private async Task CardClicked(Card card)
    {
        if (game?.CurrentRound is null || roundPlayer is null)
        {
            return;
        }

        Trick? trick = game.CurrentRound.Tricks.LastOrDefault();

        if (game.CurrentRound.SelectingCards)
        {
            if (!roundPlayer!.CardsToPass.Contains(card))
            {
                var cardsList = roundPlayer.CardsToPass.ToList();
                cardsList.Add(card);
                roundPlayer.CardsToPass = cardsList.ToArray();
            }
            else
            {
                roundPlayer.CardsToPass = roundPlayer.CardsToPass.Where(c => c != card).ToArray();
            }

            passButtonDisabled = roundPlayer.CardsToPass.Length < 3;
        }
        else if (trick?.Turn?.PlayerId == roundPlayer.Player.Id)
        {
            await SignalRService.PlayCard(game, roundPlayer, card);
        }
    }

    private async Task PassCards()
    {        
        //await JS.InvokeVoidAsync("moveCardAnimation", card.CardId);

        if (game?.CurrentRound is null)
        {
            return;
        }

        PassCard[] passCards = game.CurrentRound.Players.SelectMany(roundPlayer => roundPlayer.CardsToPass.Select(card =>
            new PassCard(
                roundPlayer.Player.Id,
                GetPlayerTo(game.CurrentRound.Players.ToList().IndexOf(roundPlayer)).Player.Id,
                card))).ToArray();

        foreach (RoundPlayer roundPlayer in game?.CurrentRound?.Players!)
        {
            foreach (var card in roundPlayer.CardsToPass)
            {
                RoundPlayer fromPlayer = roundPlayer;
                RoundPlayer? toPlayer = GetPlayerTo(game.CurrentRound.Players.ToList().IndexOf(fromPlayer));
                fromPlayer.RemoveCard(card);
                toPlayer?.AddCard(card);
            }

            roundPlayer.CardsToPass = [];
        }

        passButtonDisabled = true;

        StateHasChanged();        
                
        await SignalRService.PassCards(game!, passCards);
    }

    private RoundPlayer GetPlayerTo(int index)
    {
        switch (game?.PassingDirection)
        {
            case PassingDirection.Left:
                return GetLeftPlayer();
            case PassingDirection.Across:
                return GetAcrossPlayer();
            case PassingDirection.Right:
                return GetRightPlayer();
            default:
                return game!.CurrentRound!.Players[index];
        }

        RoundPlayer GetLeftPlayer()
        {
            return game.CurrentRound!.Players[(index + 1) % 4];
        }

        RoundPlayer GetAcrossPlayer()
        {
            return game.CurrentRound!.Players[(index + 2) % 4];
        }

        RoundPlayer GetRightPlayer()
        {
            return game.CurrentRound!.Players[(index + 3) % 4];
        }
    }

    private Card? TrickCard(int index)
    {
        if (game?.CurrentRound is null || game.CurrentRound.Players.Count() <= index)
        {
            return null;
        }

        RoundPlayer player = game.CurrentRound.Players[index];

        return game.CurrentRound.Tricks.LastOrDefault()?.TrickCards.SingleOrDefault(_ => _.PlayerId == player.Player.Id)?.Card;
    }

    private string ZIndex(int index)
    {
        if (game?.CurrentRound is null || game.CurrentRound.Players.Count() <= index)
        {
            return string.Empty;
        }

        RoundPlayer player = game.CurrentRound.Players[index];
        Trick? trick = game.CurrentRound.Tricks.LastOrDefault();

        if (player.Player.Id == trick?.Players[0].Id)
        {
            return "z-10";
        }
        else if (player.Player.Id == trick?.Players[1].Id)
        {
            return "z-20";
        }
        else if (player.Player.Id == trick?.Players[2].Id)
        {
            return "z-30";
        }
        else if (player.Player.Id == trick?.Players[3].Id)
        {
            return "z-40";
        }

        return string.Empty;
    }
}
