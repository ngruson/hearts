@page "/"
@rendermode InteractiveServer

@using Dapr.Client
@using Hearts.Contracts
@using Microsoft.AspNetCore.Components.QuickGrid

@inject DaprClient DaprClient
@inject LocalStorageService LocalStorageService
@inject SignalRService SignalRService
@attribute [Authorize]

<div class="container pt-40">
    <div class="flex flex-col items-center mx-auto p-5 dark:!text-gray-300">
        <!-- Header Section -->
        <header class="text-center mb-5">
            <h1 class="!font-medium !text-5xl">Game Lobby</h1>
            <p>Welcome to the Hearts game lobby. Start or join a game to begin playing.</p>
        </header>

        <div class="w-4/5 mb-5 flex items-center justify-center">
            <QuickGrid Items="Games.AsQueryable()" Virtualize="true" PageSize="5" Class="[&>thead>tr>th]:text-left">
                <PropertyColumn Property="@(game => game.Type)" Title="Game" Class="w-32" />
                <PropertyColumn Property="@(game => game.State)" Title="State" Class="w-32" />
                <PropertyColumn Property="@(game => game.Enrolled)" Title="Enrolled" Class="w-32" />
            </QuickGrid>
        </div>

        <!-- Running Games Section -->
        @* <section class="w-4/5 mb-5">
            <h2 class="!font-medium !text-3xl dark:!text-gray-300 border-b-2 border-gray-300 pb-1.25 mb-2.5">Running Games</h2>
            <ul class="list-none p-0">
                @foreach (var game in RunningGames)
                {
                    <li class="flex justify-between p-2.5 border border-gray-300 rounded-md mb-1.25">
                        <span class="dark:!text-gray-300">@game.Id</span>
                    </li>
                }
            </ul>
        </section> *@

        <!-- Start New Game Section -->
        @* <section class="w-4/5 mb-5">
            <h2 class="!font-medium !text-3xl dark:!text-gray-300 border-b-2 border-gray-300 pb-1.25 mb-2.5">Start a New Game</h2>
            <CreateGameButton Player="player" />
        </section> *@

        <!-- Waiting Games Section -->
        @* <section class="w-4/5 mb-5">
            <h2 class="!font-medium !text-3xl dark:!text-gray-300 border-b-2 border-gray-300 pb-1.25 mb-2.5">Waiting Games</h2>
            <ul class="list-none p-0">
                @foreach (var game in WaitingGames)
                {
                    <li class="flex justify-between p-2.5 border border-gray-300 rounded-md mb-1.25">
                        <span class="dark:!text-gray-300">@game.Id</span>
                        <button class="bg-red-600 text-white border-none rounded-md px-2.5 py-1.25 cursor-pointer hover:bg-red-700" @onclick="() => JoinGame(game.Id)">Join</button>
                    </li>
                }
            </ul>
        </section> *@

        <!-- Player Information Section -->
        @* <section class="w-4/5 mb-5">
            <h2 class="!font-medium !text-3xl dark:!text-gray-300 border-b-2 border-gray-300 pb-1.25 mb-2.5">Player Information</h2>
            <p class="dark:!text-gray-300">Player Name: @player?.PlayerName</p>
        </section> *@
    </div>
</div>

@code {
    private List<Contracts.Api.Game> Games = [];
    private Player? player;

    protected override async Task OnInitializedAsync()
    {
        await SignalRService.StartAsync();

        Games = await FetchGames();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            player = await LocalStorageService.GetItemAsync<Player>("player");

            if (player is null)
            {
                SignalRService.PlayerCreated += OnPlayerCreated;
                await SignalRService.CreatePlayer("smirking_squiggly");
            }
        }
    }

    private void OnPlayerCreated(object? sender, Player player)
    {
        this.player = player;
        Task.Run(() => LocalStorageService.SetItemAsync("player", player));
        InvokeAsync(StateHasChanged);
    }

    private async Task<List<Contracts.Api.Game>> FetchGames()
    {
        try
        {
            using var client = DaprClient.CreateInvokeHttpClient("backend");
            var response = await client.GetFromJsonAsync<List<Contracts.Api.Game>>("/games");
            return response ?? new List<Contracts.Api.Game>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching games: {ex.Message}");
            return new List<Contracts.Api.Game>();
        }
    }

    private void JoinGame(Guid gameId)
    {
        // Implement join game logic
    }
}
